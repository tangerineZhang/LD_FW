//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码由 wsdl 自动生成, Version=4.0.30319.33440。
// 
namespace LD.Service {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BS_ServiceSoap", Namespace="http://tempuri.org/")]
    public partial class BS_Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback StartProcessOperationCompleted;
        
        private System.Threading.SendOrPostCallback WriteBusinessDataToBPMOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoInvalidOperationCompleted;
        
        /// <remarks/>
        public BS_Service() {
            string urlSetting = System.Configuration.ConfigurationManager.AppSettings["BPMServiceBaseUrl"];
            if ((urlSetting != null)) {
                this.Url = string.Concat(urlSetting, "BS_Service.asmx");
            }
            else {
                this.Url = "http://api.lvdu-dc.com/BS_Service.asmx";
            }
        }
        
        /// <remarks/>
        public event StartProcessCompletedEventHandler StartProcessCompleted;
        
        /// <remarks/>
        public event WriteBusinessDataToBPMCompletedEventHandler WriteBusinessDataToBPMCompleted;
        
        /// <remarks/>
        public event DoInvalidCompletedEventHandler DoInvalidCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StartProcess", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string StartProcess(string strUserid, string strPassword, string strBilluserid, string strBSID, string strBTID, string strBOID, string iProcInstID, string strTopic, string processxmldata) {
            object[] results = this.Invoke("StartProcess", new object[] {
                        strUserid,
                        strPassword,
                        strBilluserid,
                        strBSID,
                        strBTID,
                        strBOID,
                        iProcInstID,
                        strTopic,
                        processxmldata});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginStartProcess(string strUserid, string strPassword, string strBilluserid, string strBSID, string strBTID, string strBOID, string iProcInstID, string strTopic, string processxmldata, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("StartProcess", new object[] {
                        strUserid,
                        strPassword,
                        strBilluserid,
                        strBSID,
                        strBTID,
                        strBOID,
                        iProcInstID,
                        strTopic,
                        processxmldata}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndStartProcess(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StartProcessAsync(string strUserid, string strPassword, string strBilluserid, string strBSID, string strBTID, string strBOID, string iProcInstID, string strTopic, string processxmldata) {
            this.StartProcessAsync(strUserid, strPassword, strBilluserid, strBSID, strBTID, strBOID, iProcInstID, strTopic, processxmldata, null);
        }
        
        /// <remarks/>
        public void StartProcessAsync(string strUserid, string strPassword, string strBilluserid, string strBSID, string strBTID, string strBOID, string iProcInstID, string strTopic, string processxmldata, object userState) {
            if ((this.StartProcessOperationCompleted == null)) {
                this.StartProcessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartProcessOperationCompleted);
            }
            this.InvokeAsync("StartProcess", new object[] {
                        strUserid,
                        strPassword,
                        strBilluserid,
                        strBSID,
                        strBTID,
                        strBOID,
                        iProcInstID,
                        strTopic,
                        processxmldata}, this.StartProcessOperationCompleted, userState);
        }
        
        private void OnStartProcessOperationCompleted(object arg) {
            if ((this.StartProcessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartProcessCompleted(this, new StartProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WriteBusinessDataToBPM", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WriteBusinessDataToBPM(string bsid, string btid, string boid, string bsxml, string procInstID, string userid) {
            object[] results = this.Invoke("WriteBusinessDataToBPM", new object[] {
                        bsid,
                        btid,
                        boid,
                        bsxml,
                        procInstID,
                        userid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginWriteBusinessDataToBPM(string bsid, string btid, string boid, string bsxml, string procInstID, string userid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("WriteBusinessDataToBPM", new object[] {
                        bsid,
                        btid,
                        boid,
                        bsxml,
                        procInstID,
                        userid}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndWriteBusinessDataToBPM(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WriteBusinessDataToBPMAsync(string bsid, string btid, string boid, string bsxml, string procInstID, string userid) {
            this.WriteBusinessDataToBPMAsync(bsid, btid, boid, bsxml, procInstID, userid, null);
        }
        
        /// <remarks/>
        public void WriteBusinessDataToBPMAsync(string bsid, string btid, string boid, string bsxml, string procInstID, string userid, object userState) {
            if ((this.WriteBusinessDataToBPMOperationCompleted == null)) {
                this.WriteBusinessDataToBPMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWriteBusinessDataToBPMOperationCompleted);
            }
            this.InvokeAsync("WriteBusinessDataToBPM", new object[] {
                        bsid,
                        btid,
                        boid,
                        bsxml,
                        procInstID,
                        userid}, this.WriteBusinessDataToBPMOperationCompleted, userState);
        }
        
        private void OnWriteBusinessDataToBPMOperationCompleted(object arg) {
            if ((this.WriteBusinessDataToBPMCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WriteBusinessDataToBPMCompleted(this, new WriteBusinessDataToBPMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DoInvalid", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DoInvalid(string bsid, string btid, string boid, string userid, string procInstID, string invalidComment) {
            object[] results = this.Invoke("DoInvalid", new object[] {
                        bsid,
                        btid,
                        boid,
                        userid,
                        procInstID,
                        invalidComment});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDoInvalid(string bsid, string btid, string boid, string userid, string procInstID, string invalidComment, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DoInvalid", new object[] {
                        bsid,
                        btid,
                        boid,
                        userid,
                        procInstID,
                        invalidComment}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndDoInvalid(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DoInvalidAsync(string bsid, string btid, string boid, string userid, string procInstID, string invalidComment) {
            this.DoInvalidAsync(bsid, btid, boid, userid, procInstID, invalidComment, null);
        }
        
        /// <remarks/>
        public void DoInvalidAsync(string bsid, string btid, string boid, string userid, string procInstID, string invalidComment, object userState) {
            if ((this.DoInvalidOperationCompleted == null)) {
                this.DoInvalidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoInvalidOperationCompleted);
            }
            this.InvokeAsync("DoInvalid", new object[] {
                        bsid,
                        btid,
                        boid,
                        userid,
                        procInstID,
                        invalidComment}, this.DoInvalidOperationCompleted, userState);
        }
        
        private void OnDoInvalidOperationCompleted(object arg) {
            if ((this.DoInvalidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoInvalidCompleted(this, new DoInvalidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void StartProcessCompletedEventHandler(object sender, StartProcessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartProcessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartProcessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void WriteBusinessDataToBPMCompletedEventHandler(object sender, WriteBusinessDataToBPMCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WriteBusinessDataToBPMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WriteBusinessDataToBPMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void DoInvalidCompletedEventHandler(object sender, DoInvalidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoInvalidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoInvalidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
